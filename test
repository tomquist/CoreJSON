#!/bin/bash

set -e # exit on failure

function xcode_tests {
    (
        set +e;
        set -x; # print commands executed; use subshell to avoid having to print 'set +x' to disable it

        which -s xcpretty
        XCPRETTY_INSTALLED=$?
        set -e;
        
        
        XCB1='xcodebuild test -project CoreJSON.xcodeproj -scheme CoreJSON-Package -destination "platform=OS X"'

        if [[ $TRAVIS || $XCPRETTY_INSTALLED == 0 ]]; then
            eval "set -o pipefail && ${XCB1} | xcpretty" && eval "set -o pipefail && ${XCB1} | xcpretty" && eval "set -o pipefail && ${XCB1} | xcpretty"
        else
            eval "${XCB1}" && eval "${XCB2}" && eval "${XCB3}"
        fi
    )
    echo
    echo "Xcode tests passed"
}

function cocoapods_tests {
    (
        set -e;
        set -x;
        pod lib lint
    )
    echo
    echo "CocoaPods tests passed"
}

function spm_tests {
    (
        set -e;
        set -x; # print commands executed; use subshell to avoid having to print 'set +x' to disable it
        swift package clean &&
        swift build &&
        swift test --enable-test-discovery
    )
    echo
    echo "SPM tests passed"
}

function help {
    echo "Usage: $0 COMMANDS..."
    echo
    echo "Runs specific test suites."
    echo
    echo "COMMANDS:"
    echo "  spm:   runs tests via Swift Package Manager (Linux)"
    echo "  xcode: runs tests via Xcode (OS X, iOS, tvOS)"
    echo "  help:  Displays this help"
    echo
}

for arg in "$@"
do
    case $arg in
        "spm") spm_tests;;
        "xcode") xcode_tests;;
	"pod") cocoapods_tests;;
        "help") help;;
    esac
done

if [ $# == 0 ]; then
    help
fi
